{"version":3,"file":"lb-sdk-core.esm.js","sources":["../src/constants.ts","../src/utils/number.ts","../src/entities/fractions/fraction.ts","../src/entities/chain.ts","../src/utils/validateValue.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth.ts","../src/entities/nativeCurrency.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport BN from 'bn.js'\n\nexport const BNtoJSBI = (value: BN) => JSBI.BigInt(value)\nexport const JSBItoBN = (value: JSBI) => new BN(value.toString())\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { JSBItoBN } from '../../utils/number'\nimport BN from 'bn.js'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public get numberatorBN(): BN {\n    return JSBItoBN(this.numerator)\n  }\n\n  public get denominatorBN(): BN {\n    return JSBItoBN(this.denominator)\n  }\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  public get quotientBN(): BN {\n    return JSBItoBN(this.quotient)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator),\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","export enum ChainId {\n  MAINNET = 1,\n  GÃ–RLI = 5,\n  MATIC = 137,\n  MUMBAI = 80001,\n  BSCTESTNET = 97,\n  BSCMAINNET = 56,\n  AVAXTESTNET = 43113,\n  AVAXMAINNET = 43114,\n  FANTOM = 250,\n  CRONOS = 25,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421611,\n  BTTC = 199,\n  VELAS = 106,\n  AURORA = 1313161554,\n  OASIS = 42262,\n  OPTIMISM = 10,\n  SOLANA = 101, //fake id\n  ETHW = 10001,\n}\n\nexport function getChainType(chainId: ChainId) {\n  if (chainId === ChainId.SOLANA) return ChainType.SOLANA\n  return ChainType.EVM\n}\n\nexport enum ChainType {\n  EVM = 'EVM',\n  SOLANA = 'SOLANA',\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { MaxUint256 } from '../constants'\nimport { ChainId, ChainType, getChainType } from '../entities/chain'\n\nconst ONE = JSBI.BigInt(1)\nconst ZERO = JSBI.BigInt(0)\n\nenum RustType {\n  u64 = 'u64',\n  U256 = 'U256',\n}\n\nconst RUST_TYPE_MAXIMA = {\n  [RustType.u64]: JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(64)), ONE),\n  [RustType.U256]: JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256)), ONE),\n}\n\nfunction validateRustTypeValue(value: JSBI, rustType: RustType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${rustType}.`)\n  invariant(JSBI.lessThanOrEqual(value, RUST_TYPE_MAXIMA[rustType]), `${value} is not a ${rustType}.`)\n}\n\nexport default function validateValue(chainId: ChainId, value: JSBI) {\n  const chainType = getChainType(chainId)\n  if (chainType === ChainType.SOLANA) validateRustTypeValue(value, RustType.u64)\n  if (chainType === ChainType.EVM) invariant(JSBI.lessThanOrEqual(value, MaxUint256), 'AMOUNT')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding } from '../../constants'\nimport validateValue from '../../utils/validateValue'\nimport BN from 'bn.js'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh | BN): CurrencyAmount<T> {\n    if (rawAmount instanceof BN) return new CurrencyAmount(currency, rawAmount.toString())\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    validateValue(currency.chainId, this.quotient)\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { Token } from '..'\nimport { CurrencyAmount } from './currencyAmount'\nexport class TokenAmount extends CurrencyAmount<Token> {}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, ChainType, getChainType } from './chain'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  public readonly chainType: ChainType\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId in ChainId ? (chainId as ChainId) : ChainId.MAINNET\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n    this.chainType = getChainType(this.chainId)\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { getAddress } from '@ethersproject/address'\nimport { PublicKey } from '@solana/web3.js'\nimport { ChainId, ChainType, getChainType } from '../entities/chain'\n\nconst isValidSolanaAddress = (address: string): boolean => {\n  try {\n    if (!address) return false\n    const pub = new PublicKey(address)\n    if (PublicKey.isOnCurve(pub)) return true\n    // .isOnCurve false on some valid address\n    // e.g: DAI https://solscan.io/address/EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string, chainId: ChainId): string {\n  try {\n    const chainType = getChainType(chainId)\n    if (chainType === ChainType.SOLANA) {\n      if (isValidSolanaAddress(address)) return address\n      throw new Error(`${address} is not a valid address.`)\n    }\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import { PublicKey } from '@solana/web3.js'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { ChainType } from './chain'\nimport { Currency } from './currency'\nimport BN from 'bn.js'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n  public mint: PublicKey | null\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address, chainId)\n    if (this.chainType === ChainType.SOLANA) this.mint = new PublicKey(this.address)\n    else this.mint = null\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    if (this.chainType === ChainType.SOLANA) return new BN(this.mint!.toBytes()).lt(new BN(other.mint!.toBytes()))\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { ChainId } from './chain'\nimport { Token } from './token'\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ETHW]: new Token(ChainId.ETHW, '0x7Bf88d2c0e32dE92CdaF2D43CcDc23e8Edfd5990', 18, 'WETHW', 'Wrapped ETHPoW'),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0x48f6D7dAE56623Dde5a0D56B283165cAE1753D70', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.MUMBAI]: new Token(\n    ChainId.MUMBAI,\n    '0x19395624C030A11f58e820C3AeFb1f5960d9742a',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.BSCMAINNET]: new Token(\n    ChainId.BSCMAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.AVAXTESTNET]: new Token(\n    ChainId.AVAXTESTNET,\n    '0x1D308089a2D1Ced3f1Ce36B1FcaF815b07217be3',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.AVAXMAINNET]: new Token(\n    ChainId.AVAXMAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped Fantom',\n  ),\n  [ChainId.CRONOS]: new Token(ChainId.CRONOS, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'WCRO', 'Wrapped CRO'),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.BTTC]: new Token(\n    ChainId.BTTC,\n    '0x8D193c6efa90BCFf940A98785d1Ce9D093d3DC8A',\n    18,\n    'WBTT',\n    'Wrapped BitTorrent',\n  ),\n  [ChainId.VELAS]: new Token(ChainId.VELAS, '0xc579D1f3CF86749E05CD06f7ADe17856c2CE3126', 18, 'WVLX', 'Wrapped VLX'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.OASIS]: new Token(ChainId.OASIS, '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733', 18, 'WROSE', 'Wrapped ROSE'),\n  [ChainId.OPTIMISM]: new Token(\n    ChainId.OPTIMISM,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.SOLANA]: new Token(ChainId.SOLANA, 'So11111111111111111111111111111111111111112', 9, 'WSOL', 'Wrapped SOL'),\n}\n","import { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n\n  public constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n  }\n\n  get wrapped(): Token {\n    return WETH[this.chainId]\n  }\n\n  equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '.'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH[this.chainId as ChainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","BNtoJSBI","value","JSBItoBN","BN","toString","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","ChainId","getChainType","chainId","SOLANA","ChainType","EVM","ONE","ZERO","RustType","RUST_TYPE_MAXIMA","u64","exponentiate","U256","validateRustTypeValue","rustType","greaterThanOrEqual","lessThanOrEqual","validateValue","chainType","CurrencyAmount","currency","decimalScale","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","TokenAmount","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","MAINNET","isValidSolanaAddress","address","pub","PublicKey","isOnCurve","e","validateAndParseAddress","getAddress","error","Token","mint","sortsBefore","toBytes","lt","toLowerCase","WETH","ETHW","GÃ–RLI","MATIC","MUMBAI","BSCTESTNET","BSCMAINNET","AVAXTESTNET","AVAXMAINNET","FANTOM","CRONOS","ARBITRUM","ARBITRUM_TESTNET","BTTC","VELAS","AURORA","OASIS","OPTIMISM","NativeCurrency","isNative","Ether","onChain","_etherCache","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","TWO","sqrt","Math","floor","toNumber","z","x"],"mappings":"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"}