{"version":3,"file":"lb-sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/entities/chain.ts","../src/utils/number.ts","../src/entities/fractions/fraction.ts","../src/utils/validateValue.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth.ts","../src/entities/nativeCurrency.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","export enum ChainId {\n  MAINNET = 1,\n  GÃ–RLI = 5,\n  MATIC = 137,\n  MUMBAI = 80001,\n  BSCTESTNET = 97,\n  BSCMAINNET = 56,\n  AVAXTESTNET = 43113,\n  AVAXMAINNET = 43114,\n  FANTOM = 250,\n  CRONOS = 25,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421611,\n  BTTC = 199,\n  VELAS = 106,\n  AURORA = 1313161554,\n  OASIS = 42262,\n  OPTIMISM = 10,\n  SOLANA = 101, //fake id\n  ETHW = 10001,\n}\n\nexport function getChainType(chainId: ChainId) {\n  if (chainId === ChainId.SOLANA) return ChainType.SOLANA\n  return ChainType.EVM\n}\n\nexport enum ChainType {\n  EVM = 'EVM',\n  SOLANA = 'SOLANA',\n}\n","import JSBI from 'jsbi'\nimport BN from 'bn.js'\n\nexport const BNtoJSBI = (value: BN) => JSBI.BigInt(value)\nexport const JSBItoBN = (value: JSBI) => new BN(value.toString())\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { JSBItoBN } from '../../utils/number'\nimport BN from 'bn.js'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public get numberatorBN(): BN {\n    return JSBItoBN(this.numerator)\n  }\n\n  public get denominatorBN(): BN {\n    return JSBItoBN(this.denominator)\n  }\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  public get quotientBN(): BN {\n    return JSBItoBN(this.quotient)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator),\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { MaxUint256 } from '../constants'\nimport { ChainId, ChainType, getChainType } from '../entities/chain'\n\nconst ONE = JSBI.BigInt(1)\nconst ZERO = JSBI.BigInt(0)\n\nenum RustType {\n  u64 = 'u64',\n  U256 = 'U256',\n}\n\nconst RUST_TYPE_MAXIMA = {\n  [RustType.u64]: JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(64)), ONE),\n  [RustType.U256]: JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256)), ONE),\n}\n\nfunction validateRustTypeValue(value: JSBI, rustType: RustType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${rustType}.`)\n  invariant(JSBI.lessThanOrEqual(value, RUST_TYPE_MAXIMA[rustType]), `${value} is not a ${rustType}.`)\n}\n\nexport default function validateValue(chainId: ChainId, value: JSBI) {\n  const chainType = getChainType(chainId)\n  if (chainType === ChainType.SOLANA) validateRustTypeValue(value, RustType.u64)\n  if (chainType === ChainType.EVM) invariant(JSBI.lessThanOrEqual(value, MaxUint256), 'AMOUNT')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding } from '../../constants'\nimport validateValue from '../../utils/validateValue'\nimport BN from 'bn.js'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh | BN): CurrencyAmount<T> {\n    if (rawAmount instanceof BN) return new CurrencyAmount(currency, rawAmount.toString())\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    validateValue(currency.chainId, this.quotient)\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { Token } from '..'\nimport { CurrencyAmount } from './currencyAmount'\nexport class TokenAmount extends CurrencyAmount<Token> {}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, ChainType, getChainType } from './chain'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  public readonly chainType: ChainType\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId in ChainId ? (chainId as ChainId) : ChainId.MAINNET\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n    this.chainType = getChainType(this.chainId)\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { getAddress } from '@ethersproject/address'\nimport { PublicKey } from '@solana/web3.js'\nimport { ChainId, ChainType, getChainType } from '../entities/chain'\n\nconst isValidSolanaAddress = (address: string): boolean => {\n  try {\n    if (!address) return false\n    const pub = new PublicKey(address)\n    if (PublicKey.isOnCurve(pub)) return true\n    // .isOnCurve false on some valid address\n    // e.g: DAI https://solscan.io/address/EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string, chainId: ChainId): string {\n  try {\n    const chainType = getChainType(chainId)\n    if (chainType === ChainType.SOLANA) {\n      if (isValidSolanaAddress(address)) return address\n      throw new Error(`${address} is not a valid address.`)\n    }\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import { PublicKey } from '@solana/web3.js'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { ChainType } from './chain'\nimport { Currency } from './currency'\nimport BN from 'bn.js'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n  public mint: PublicKey | null\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address, chainId)\n    if (this.chainType === ChainType.SOLANA) this.mint = new PublicKey(this.address)\n    else this.mint = null\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    if (this.chainType === ChainType.SOLANA) return new BN(this.mint!.toBytes()).lt(new BN(other.mint!.toBytes()))\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { ChainId } from './chain'\nimport { Token } from './token'\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ETHW]: new Token(ChainId.ETHW, '0x7Bf88d2c0e32dE92CdaF2D43CcDc23e8Edfd5990', 18, 'WETHW', 'Wrapped ETHPoW'),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0x48f6D7dAE56623Dde5a0D56B283165cAE1753D70', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.MUMBAI]: new Token(\n    ChainId.MUMBAI,\n    '0x19395624C030A11f58e820C3AeFb1f5960d9742a',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.BSCMAINNET]: new Token(\n    ChainId.BSCMAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.AVAXTESTNET]: new Token(\n    ChainId.AVAXTESTNET,\n    '0x1D308089a2D1Ced3f1Ce36B1FcaF815b07217be3',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.AVAXMAINNET]: new Token(\n    ChainId.AVAXMAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped Fantom',\n  ),\n  [ChainId.CRONOS]: new Token(ChainId.CRONOS, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'WCRO', 'Wrapped CRO'),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.BTTC]: new Token(\n    ChainId.BTTC,\n    '0x8D193c6efa90BCFf940A98785d1Ce9D093d3DC8A',\n    18,\n    'WBTT',\n    'Wrapped BitTorrent',\n  ),\n  [ChainId.VELAS]: new Token(ChainId.VELAS, '0xc579D1f3CF86749E05CD06f7ADe17856c2CE3126', 18, 'WVLX', 'Wrapped VLX'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.OASIS]: new Token(ChainId.OASIS, '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733', 18, 'WROSE', 'Wrapped ROSE'),\n  [ChainId.OPTIMISM]: new Token(\n    ChainId.OPTIMISM,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.SOLANA]: new Token(ChainId.SOLANA, 'So11111111111111111111111111111111111111112', 9, 'WSOL', 'Wrapped SOL'),\n}\n","import { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n\n  public constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n  }\n\n  get wrapped(): Token {\n    return WETH[this.chainId]\n  }\n\n  equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '.'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH[this.chainId as ChainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","ChainId","ChainType","JSBItoBN","value","BN","toString","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","getChainType","chainId","SOLANA","EVM","RustType","ONE","ZERO","RUST_TYPE_MAXIMA","u64","exponentiate","U256","CurrencyAmount","currency","chainType","_this","rustType","greaterThanOrEqual","lessThanOrEqual","validateRustTypeValue","decimalScale","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","TokenAmount","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","MAINNET","validateAndParseAddress","address","pub","PublicKey","isOnCurve","e","isValidSolanaAddress","getAddress","error","Token","mint","sortsBefore","toBytes","lt","toLowerCase","WETH","ETHW","GÃ–RLI","MATIC","MUMBAI","BSCTESTNET","BSCMAINNET","AVAXTESTNET","AVAXMAINNET","FANTOM","CRONOS","ARBITRUM","ARBITRUM_TESTNET","BTTC","VELAS","AURORA","OASIS","OPTIMISM","NativeCurrency","isNative","Ether","_NativeCurrency","onChain","_etherCache","weth9","MAX_SAFE_INTEGER","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}